<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions name="CustomerWSService" targetNamespace="http://mobics.criticalsoftware.com/Customer" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://mobics.criticalsoftware.com/Customer" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://mobics.criticalsoftware.com/Customer" xmlns:tns="http://mobics.criticalsoftware.com/Customer" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="getCustomerPreference" type="tns:getCustomerPreference"/>
  <xs:element name="getCustomerPreferenceResponse" type="tns:getCustomerPreferenceResponse"/>
  <xs:element name="isValidCustomerPin" type="tns:isValidCustomerPin"/>
  <xs:element name="isValidCustomerPinResponse" type="tns:isValidCustomerPinResponse"/>
  <xs:element name="registerCustomer" type="tns:registerCustomer"/>
  <xs:element name="registerCustomerResponse" type="tns:registerCustomerResponse"/>
  <xs:element name="validateEmail" type="tns:validateEmail"/>
  <xs:element name="validateEmailResponse" type="tns:validateEmailResponse"/>
  <xs:complexType name="isValidCustomerPin">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="customerPin" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="isValidCustomerPinResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="registerCustomer">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="newUser" type="tns:registerCustomerDTO"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="registerCustomerDTO">
    <xs:sequence>
      <xs:element name="accessCarByMobileApp" type="xs:boolean"/>
      <xs:element name="accessCarByPublicTransportationCard" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="addons" nillable="true" type="xs:int"/>
      <xs:element minOccurs="0" name="address" type="xs:string"/>
      <xs:element minOccurs="0" name="associatedTransportationCompany" type="xs:int"/>
      <xs:element minOccurs="0" name="associatedTransportationCompanyCardNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="carClubCode" type="xs:string"/>
      <xs:element minOccurs="0" name="countryId" type="xs:int"/>
      <xs:element minOccurs="0" name="dateOfBirth" type="xs:string"/>
      <xs:element name="defaultLocationForSearchingCars" type="xs:boolean"/>
      <xs:element minOccurs="0" name="driversLicenceCountry" type="xs:int"/>
      <xs:element minOccurs="0" name="driversLicenceExpirationDate" type="xs:string"/>
      <xs:element minOccurs="0" name="driversLicenceFile" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="driversLicenceNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="email" type="xs:string"/>
      <xs:element minOccurs="0" name="fullName" type="xs:string"/>
      <xs:element minOccurs="0" name="idCardFile" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="idCardNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="locality" type="xs:string"/>
      <xs:element minOccurs="0" name="occupationID" type="xs:int"/>
      <xs:element minOccurs="0" name="password" type="xs:string"/>
      <xs:element minOccurs="0" name="phoneNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="pin" type="xs:string"/>
      <xs:element minOccurs="0" name="zipCode1" type="xs:string"/>
      <xs:element minOccurs="0" name="zipCode2" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="registerCustomerResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCustomerPreference">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="login" type="xs:string"/>
      <xs:element form="qualified" minOccurs="0" name="preferenceType" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCustomerPreferenceResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:userPreferenceDTO"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="userPreferenceDTO">
    <xs:sequence>
      <xs:element minOccurs="0" name="columnName" type="xs:string"/>
      <xs:element minOccurs="0" name="sortAsc" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="validateEmail">
    <xs:sequence>
      <xs:element form="qualified" minOccurs="0" name="email" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="validateEmailResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AuthenticationServiceException" type="tns:AuthenticationServiceException"/>
  <xs:complexType name="AuthenticationServiceException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="CustomerServiceException" type="tns:CustomerServiceException"/>
  <xs:complexType name="CustomerServiceException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="CustomerNotFoundException" type="tns:CustomerNotFoundException"/>
  <xs:complexType name="CustomerNotFoundException">
    <xs:sequence/>
  </xs:complexType>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="registerCustomer">
    <wsdl:part element="tns:registerCustomer" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="CustomerServiceException">
    <wsdl:part element="tns:CustomerServiceException" name="CustomerServiceException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthenticationServiceException">
    <wsdl:part element="tns:AuthenticationServiceException" name="AuthenticationServiceException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCustomerPreference">
    <wsdl:part element="tns:getCustomerPreference" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="validateEmail">
    <wsdl:part element="tns:validateEmail" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="registerCustomerResponse">
    <wsdl:part element="tns:registerCustomerResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="validateEmailResponse">
    <wsdl:part element="tns:validateEmailResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isValidCustomerPin">
    <wsdl:part element="tns:isValidCustomerPin" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCustomerPreferenceResponse">
    <wsdl:part element="tns:getCustomerPreferenceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="CustomerNotFoundException">
    <wsdl:part element="tns:CustomerNotFoundException" name="CustomerNotFoundException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isValidCustomerPinResponse">
    <wsdl:part element="tns:isValidCustomerPinResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="Customer">
    <wsdl:operation name="isValidCustomerPin">
      <wsdl:input message="tns:isValidCustomerPin" name="isValidCustomerPin">
    </wsdl:input>
      <wsdl:output message="tns:isValidCustomerPinResponse" name="isValidCustomerPinResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="registerCustomer">
      <wsdl:input message="tns:registerCustomer" name="registerCustomer">
    </wsdl:input>
      <wsdl:output message="tns:registerCustomerResponse" name="registerCustomerResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CustomerServiceException" name="CustomerServiceException">
    </wsdl:fault>
      <wsdl:fault message="tns:AuthenticationServiceException" name="AuthenticationServiceException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCustomerPreference">
      <wsdl:input message="tns:getCustomerPreference" name="getCustomerPreference">
    <wsp:PolicyReference URI="#SecurityServiceUsernameHashPasswordPolicy"/>
    </wsdl:input>
      <wsdl:output message="tns:getCustomerPreferenceResponse" name="getCustomerPreferenceResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CustomerNotFoundException" name="CustomerNotFoundException">
    </wsdl:fault>
      <wsdl:fault message="tns:CustomerServiceException" name="CustomerServiceException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="validateEmail">
      <wsdl:input message="tns:validateEmail" name="validateEmail">
    </wsdl:input>
      <wsdl:output message="tns:validateEmailResponse" name="validateEmailResponse">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CustomerWSServiceSoapBinding" type="tns:Customer">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="isValidCustomerPin">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isValidCustomerPin">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isValidCustomerPinResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="registerCustomer">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="registerCustomer">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="registerCustomerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CustomerServiceException">
        <soap:fault name="CustomerServiceException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AuthenticationServiceException">
        <soap:fault name="AuthenticationServiceException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCustomerPreference">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCustomerPreference">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCustomerPreferenceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CustomerNotFoundException">
        <soap:fault name="CustomerNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="CustomerServiceException">
        <soap:fault name="CustomerServiceException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="validateEmail">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="validateEmail">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="validateEmailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CustomerWSService">
    <wsdl:port binding="tns:CustomerWSServiceSoapBinding" name="CustomerPort">
      <soap:address location="http://localhost:8080/mobics-webservices/Customer"/>
    </wsdl:port>
  </wsdl:service>
    <wsp:Policy wsu:Id="SecurityServiceUsernameHashPasswordPolicy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
        <wsp:Policy>
          <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
            <wsp:Policy>
              <sp:HashPassword/>
            </wsp:Policy>
          </sp:UsernameToken>
        </wsp:Policy>
      </sp:SupportingTokens>
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>
</wsdl:definitions>